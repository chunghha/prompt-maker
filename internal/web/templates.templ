package web

// footerComponent is a reusable component for the footer content.
templ footerComponent(version, modelName string) {
	<p>Prompt Maker v{ version } | Model: { modelName }</p>
}

// copyButtonComponent creates a hidden div with raw text and a button to copy it.
templ copyButtonComponent(rawText, targetID string) {
	<div class="flex justify-end">
		<button class="btn btn-sm btn-info" onclick="copyRawText(this)" data-target-id={ targetID }>Copy</button>
	</div>
	<div id={ targetID } class="hidden">{ rawText }</div>
}

// indexPage is the main page template.
templ indexPage(version, defaultModel string, models []string) {
	<!DOCTYPE html>
	<html lang="en" data-theme="milkshake">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Prompt Maker</title>
			<link href="/static/css/output.css" rel="stylesheet" type="text/css"/>
			<script src="https://unpkg.com/htmx.org@2.0.5" integrity="sha384-t4DxZSyQK+0Uv4jzy5B0QyHyWQD2GFURUmxKMBVww9+e2EJ0ei/vCvv7+79z0fkr" crossorigin="anonymous"></script>
		</head>
		<body class="font-sans">
			<div class="container mx-auto max-w-4xl p-8">
				<!-- Header with Theme Switcher -->
				<div class="navbar bg-base-100 rounded-box mb-8">
					<div class="flex-1">
						<a class="btn btn-ghost text-2xl font-serif">Prompt Maker</a>
					</div>
					<div class="flex-none">
						<div id="theme-switcher" class="dropdown dropdown-end">
							<div tabindex="0" role="button" class="btn">
								Theme
								<svg width="12px" height="12px" class="h-2 w-2 fill-current opacity-60 inline-block" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2048 2048"><path d="M1799 349l242 241-1017 1017L7 590l242-241 775 775 775-775z"></path></svg>
							</div>
							<ul tabindex="0" class="dropdown-content z-[1] p-2 shadow-2xl bg-base-300 rounded-box w-52 h-96 overflow-y-auto">
								<li><a onclick="setTheme('light')">light</a></li>
								<li><a onclick="setTheme('dark')">dark</a></li>
								<li><a onclick="setTheme('cupcake')">cupcake</a></li>
								<li><a onclick="setTheme('bumblebee')">bumblebee</a></li>
								<li><a onclick="setTheme('emerald')">emerald</a></li>
								<li><a onclick="setTheme('corporate')">corporate</a></li>
								<li><a onclick="setTheme('synthwave')">synthwave</a></li>
								<li><a onclick="setTheme('retro')">retro</a></li>
								<li><a onclick="setTheme('cyberpunk')">cyberpunk</a></li>
								<li><a onclick="setTheme('valentine')">valentine</a></li>
								<li><a onclick="setTheme('halloween')">halloween</a></li>
								<li><a onclick="setTheme('garden')">garden</a></li>
								<li><a onclick="setTheme('forest')">forest</a></li>
								<li><a onclick="setTheme('aqua')">aqua</a></li>
								<li><a onclick="setTheme('lofi')">lofi</a></li>
								<li><a onclick="setTheme('pastel')">pastel</a></li>
								<li><a onclick="setTheme('fantasy')">fantasy</a></li>
								<li><a onclick="setTheme('wireframe')">wireframe</a></li>
								<li><a onclick="setTheme('black')">black</a></li>
								<li><a onclick="setTheme('luxury')">luxury</a></li>
								<li><a onclick="setTheme('dracula')">dracula</a></li>
								<li><a onclick="setTheme('cmyk')">cmyk</a></li>
								<li><a onclick="setTheme('autumn')">autumn</a></li>
								<li><a onclick="setTheme('business')">business</a></li>
								<li><a onclick="setTheme('acid')">acid</a></li>
								<li><a onclick="setTheme('lemonade')">lemonade</a></li>
								<li><a onclick="setTheme('night')">night</a></li>
								<li><a onclick="setTheme('coffee')">coffee</a></li>
								<li><a onclick="setTheme('winter')">winter</a></li>
								<li><a onclick="setTheme('dim')">dim</a></li>
								<li><a onclick="setTheme('nord')">nord</a></li>
								<li><a onclick="setTheme('sunset')">sunset</a></li>
								<li><a onclick="setTheme('milkshake')">milkshake</a></li>
								<li><a onclick="setTheme('mindful')">mindful</a></li>
								<li><a onclick="setTheme('pursuit')">pursuit</a></li>
							</ul>
						</div>
					</div>
				</div>
				<p class="text-lg">Enter a rough prompt and Lyra will optimize it for you.</p>
				<form id="prompt-form" hx-post="/prompt" hx-target="#response-container" hx-swap="innerHTML" class="mt-4" hx-indicator="#prompt-indicator">
					<div class="form-control w-full max-w-xs mb-4">
						<label class="label">
							<span class="label-text">Select a Model</span>
						</label>
						<select name="model" class="select select-bordered" hx-post="/update-footer" hx-target="#footer-content" hx-swap="innerHTML" hx-trigger="change">
							for _, model := range models {
								<option value={ model } if model == defaultModel {
	selected
}>{ model }</option>
							}
						</select>
					</div>
					<textarea name="prompt" class="textarea textarea-bordered w-full mt-4" rows="6" placeholder="e.g., an email to my boss asking for a raise"></textarea>
					<button type="submit" class="btn btn-primary mt-4">
						Craft Prompt
						<span id="prompt-indicator" class="htmx-indicator loading loading-spinner loading-sm"></span>
					</button>
				</form>
				<div class="divider mt-8"></div>
				<div class="flex justify-between items-center">
					<h3 class="text-2xl font-bold">Response</h3>
					<button class="btn btn-ghost btn-sm" hx-post="/clear" hx-target="#response-container" hx-swap="innerHTML">
						Clear
					</button>
				</div>
				<div id="response-container" class="bg-base-200 p-4 rounded-box min-h-[150px] mt-4 whitespace-pre-wrap">
					<!-- The crafted prompt will be loaded here -->
				</div>
				<footer class="footer footer-center p-4 mt-8 text-base-content">
					<aside id="footer-content">
						@footerComponent(version, defaultModel)
					</aside>
				</footer>
			</div>
			<script>
				// This function now also saves the theme to localStorage.
				function setTheme(theme) {
					document.documentElement.setAttribute('data-theme', theme);
					localStorage.setItem('theme', theme);
				}

				// This IIFE (Immediately Invoked Function Expression) runs on page load.
				(function() {
					// It checks for a saved theme in localStorage and applies it.
					const savedTheme = localStorage.getItem('theme');
					if (savedTheme) {
						document.documentElement.setAttribute('data-theme', savedTheme);
					}
				})();

				// This function copies text from a hidden element to the clipboard.
				function copyRawText(button) {
					const targetId = button.dataset.targetId;
					const textToCopy = document.getElementById(targetId).innerText;
					navigator.clipboard.writeText(textToCopy).then(() => {
						const originalText = button.innerText;
						button.innerText = 'Copied!';
						setTimeout(() => {
							button.innerText = originalText;
						}, 2000); // Revert back after 2 seconds
					}).catch(err => {
						console.error('Failed to copy text: ', err);
					});
				}
			</script>
		</body>
	</html>
}

// craftedPromptComponent is the partial for the first AI response.
templ craftedPromptComponent(craftedPrompt, modelName string) {
	<div class="prose bg-base-100 p-4 rounded-box max-w-none">
		@copyButtonComponent(craftedPrompt, "raw-crafted-prompt")
		<p>{ craftedPrompt }</p>
	</div>
	<br/>
	<form hx-post="/execute" hx-target="#response-container" hx-swap="innerHTML" hx-indicator="#resubmit-indicator">
		<input type="hidden" name="prompt" value={ craftedPrompt }/>
		<input type="hidden" name="model" value={ modelName }/>
		<button type="submit" class="btn btn-secondary">
			Resubmit to Get Final Answer
			<span id="resubmit-indicator" class="htmx-indicator loading loading-spinner loading-sm"></span>
		</button>
	</form>
}

// finalAnswerComponent now also includes the copy button component.
templ finalAnswerComponent(answer string) {
	<div class="prose bg-base-100 p-4 rounded-box max-w-none">
		@copyButtonComponent(answer, "raw-final-answer")
		<p>{ answer }</p>
	</div>
}

// errorComponent displays a styled error message.
templ errorComponent(errorMessage string) {
	<div class="alert alert-error">
		<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
		<span>Error: { errorMessage }</span>
	</div>
}
